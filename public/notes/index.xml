<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes-rsses on CSE 130</title>
    <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/index.xml</link>
    <description>Recent content in Notes-rsses on CSE 130</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</managingEditor>
    <webMaster>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</webMaster>
    <lastBuildDate>Thu, 12 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JavaScript No-Nos</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js-code-3/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js-code-3/</guid>
      <description>

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/css/default.min.css&#34;&gt;
&lt;script src=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/js/highlight.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Below are code snippets that illustrate some of the flexible features of
JavaScript and how they can introduce unexpected/unintuitive behavior.  There
are many more; see Appendix B of Crockford&amp;rsquo;s &lt;em&gt;JavaScript: The Good Parts&lt;/em&gt;.
Please note that there are useful, positive side of most of these; every
language design/implementation decision is a trade-off.&lt;/p&gt;

&lt;h3 id=&#34;automatic-semicolon-insertion&#34;&gt;Automatic semicolon insertion&lt;/h3&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;auto-semi&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;auto-semi&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
function f() {
  return 3;
}
function g() {
  return
  3;
}
console.log(f()); // ??
console.log(g()); // ??

&lt;/div&gt;


&lt;h3 id=&#34;eval&#34;&gt;Eval&lt;/h3&gt;

&lt;p&gt;JavaScript&amp;rsquo;s &lt;code&gt;eval&lt;/code&gt; function can be used load and execute new code, at runtime.
This is generally considered a bad/dangerous idea, but nevertheless useful in
some cases. Beyond security implications (mostly a concern in the browser since
eval can easily be leverage to carry out &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting&#34;&gt;XSS
attacks&lt;/a&gt;), however, the
behavior of eval differs when you call it directly or indirectly. This
difference was introduced in the name of performance. (Arguably okay since you
should not be using eval very much, but not great.)&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;nono-eval&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;nono-eval&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
global.x = 33;
{
  const x = 44;
  const ev = eval;
  console.log(eval(&#34;x&#34;)); // ??
  console.log(ev(&#34;x&#34;)); // ??
}

&lt;/div&gt;


&lt;h3 id=&#34;implicit-casting&#34;&gt;Implicit casting&lt;/h3&gt;

&lt;p&gt;See the sarcastic &lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;WAT&lt;/a&gt; video.&lt;/p&gt;

&lt;h3 id=&#34;monkeypatching&#34;&gt;Monkeypatching&lt;/h3&gt;

&lt;p&gt;Because JavaScript lets you modify arbitrary objects and their prototypes,
running untrusted code safely is extremely difficult to do. (If you&amp;rsquo;re
interested in this, come talk to me; this is some of my research.)
See the examples
&lt;a href=&#34;https://github.com/google/caja/wiki/GlobalObjectPoisoning&#34;&gt;here&lt;/a&gt; on global
object poisoning. Here is the simplest:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;poisoning&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;poisoning&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
// suppose add was exposed by a third-party library
function add(x, y) {
  // Poison the Object prototype by redefining toString,
  // which is called when objects are implicitly casted to
  // strings. The modified function modifies the object (this), by
  // setting name to &#39;mud&#39;;
  Object.prototype.toString = function () {
    var name = this.name ;
    this.name = &#39;mud&#39;;
    return &#39;HA &#39; + name + &#39;.  IM STEALIN UR CODEZ!&#39;;
  };
  return x + y;
}

var o = { name: &#39;Bingo&#39; };
console.log(add(3,4)); // calling add poisoned Object.prototype
console.log(&#39;&#39; + o);
console.log(&#39;Your name is now &#39; + o.name);

&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>The power of JavaScript first-class functions</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js-code/</link>
      <pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js-code/</guid>
      <description>

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/css/default.min.css&#34;&gt;
&lt;script src=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/js/highlight.min.js&#34;&gt;&lt;/script&gt;


&lt;h3 id=&#34;block-scoping-with-functions&#34;&gt;Block scoping with functions:&lt;/h3&gt;

&lt;p&gt;Modern JavaScript has block scoping when using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; binders:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;scope-modern&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;scope-modern&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
function hello(x) {
  console.log(`A: x = ${x}`); // ??
  {
    const x = 45;
    console.log(`B: x = ${x}`); // ??
  }
  {
    console.log(`C: x = ${x}`); // ??
  }
}
hello(42);

&lt;/div&gt;


&lt;p&gt;This is not true for &lt;code&gt;var&lt;/code&gt; binders, which are scoped to the nearest function scope (if one exists, otherwise, the global scope):&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;scope-var&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;scope-var&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
function hello(x) {
  console.log(`A: x = ${x}`); // ??
  {
    var x = 45;
    console.log(`B: x = ${x}`); // ??
  }
  {
    console.log(`C: x = ${x}`); // ??
  }
}

hello(42);

&lt;/div&gt;


&lt;p&gt;We can, however, introduce block scoping to code that only uses &lt;code&gt;var&lt;/code&gt;
declarations by using first-class functions to create a new function scope:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;scope-modernize-var&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;scope-modernize-var&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
function hello(x) {
  console.log(`A: x = ${x}`); // ??
  (function () {
    var x = 45;
    console.log(`B: x = ${x}`); // ??
  })();
  (function () {
    console.log(`C: x = ${x}`); // ??
  })();
}

hello(42);

&lt;/div&gt;


&lt;p&gt;Rather than use the verbose &lt;code&gt;function&lt;/code&gt; declarations, we can also write anonymous functions using the fat arrow (&lt;code&gt;=&amp;gt;&lt;/code&gt;), as such:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;scope-modernize-var-pretty&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;scope-modernize-var-pretty&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
function hello(x) {
  console.log(`A: x = ${x}`); // ??
  (() =&gt; {
    var x = 45;
    console.log(`B: x = ${x}`); // ??
  })();
  (() =&gt; {
    console.log(`C: x = ${x}`); // ??
  })();
}

hello(42);

&lt;/div&gt;


&lt;p&gt;Fat arrows or &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&#34;&gt;arrow
functions&lt;/a&gt;
can make our code much cleaner and using them will make the lambda calculus
lecture much easier too. Below is some code showing the use of fat arrows and
how more syntax goes away as our functions get simpler:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;fat-arrows&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;fat-arrows&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const f = (x) =&gt; { 
  console.log(&#39;hello!&#39;);
  return x;
};

f(34); // ??

// if your function is simple, and only has one expression, can write it as:
const g = (x) =&gt;  x ;
// no more {}&#39; and &#34;return&#34;!
console.log(g(33));

// In fact, if function only has 1 argument, you can even remove the ()&#39;s:
const h = x =&gt;  x+3;
console.log(h(33)); // ??

// We can also use it immediately, inline:
console.log(((x, y) =&gt; x + y) (4, 5)) ; // ??

&lt;/div&gt;


&lt;h2 id=&#34;callbacks-for-performing-concurrent-asynchronous-filesystem-reads&#34;&gt;Callbacks for performing concurrent, asynchronous filesystem reads:&lt;/h2&gt;

&lt;p&gt;Node.js ships with a code JavaScript library that can be used to read and write files.
Node.js exposes functions for reading (writing) files synchronously:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;perf-sync&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;perf-sync&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const fs = require(&#39;fs&#39;);

prepFiles(); // ignore, this we&#39;re just calling this function to populate filesystem

const r1 = fs.readFileSync(&#39;./a.txt&#39;, &#39;utf8&#39;); // blocks until read is done
processFile(&#39;a.txt&#39;, r1); //blocks until processing (write) is done
const r2 = fs.readFileSync(&#39;./b.txt&#39;, &#39;utf8&#39;); // etc.
processFile(&#39;b.txt&#39;, r2);

// note that you can declare a function after the point it&#39;s used. Hoisting
// essentially moves it to the top.
function processFile(fname, str) {
  fs.writeFileSync(`/tmp/${fname}`, str);
  console.log(`DONE writing /tmp/${fname}`);
}

function prepFiles() {
	// our examples read these two files, let&#39;s make sure that they exist on the runkit machine
  fs.writeFileSync(&#39;./a.txt&#39;, &#39;alice!&#39;);
  fs.writeFileSync(&#39;./b.txt&#39;, &#39;bob!&#39;);
}

&lt;/div&gt;


&lt;p&gt;Note that each of the reads and writes block, waiting for the files to be read and processed. But this need not be the case. We can leverage the fact that the underling runtime and OS have concurrency and we can read the files concurrently:
&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;perf-async&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;perf-async&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const fs = require(&#39;fs&#39;);

prepFiles(); // ignore, this we&#39;re just calling this function to populate filesystem

fs.readFile(&#39;./a.txt&#39;, &#39;utf8&#39;, cb1); // returns immediately, cb1 is queued on the event loop and called later when actual file read is done
fs.readFile(&#39;./b.txt&#39;, &#39;utf8&#39;, cb2); // returns immediately, &#34; &#34;

function processFile(fname, str) {
  fs.writeFileSync(`/tmp/${fname}`, str);
  console.log(`DONE writing /tmp/${fname}`);
}

function cb1(err, str) {
  processFile(&#39;a.txt&#39;, str);
}

function cb2(err, str) {
  processFile(&#39;b.txt&#39;, str);
}

function prepFiles() {
	// our examples read these two files, let&#39;s make sure that they exist on the runkit machine
  fs.writeFileSync(&#39;./a.txt&#39;, &#39;alice!&#39;);
  fs.writeFileSync(&#39;./b.txt&#39;, &#39;bob!&#39;);
}

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The above code tells the Node.js runtime to read the file &lt;code&gt;a,txt&lt;/code&gt;, without
blocking, and call function &lt;code&gt;cb1&lt;/code&gt; with the error condition and data once it
read the file (or failed). Note that JavaScript always runs code to completion for each &lt;em&gt;event loop&lt;/em&gt;.
In the first event loop we tell the runtime to read files, and the runtime, in later event loops, will call our callback functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge:&lt;/strong&gt; further modify this code to eliminate the synchronous writes.&lt;/p&gt;

&lt;p&gt;Since JavaScript has first-class functions, we can clean up the above code and move the repeated code into processFie (which now returns a function that is pased to &lt;code&gt;readFile&lt;/code&gt;):
&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;perf-async-2&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;perf-async-2&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const fs = require(&#39;fs&#39;);
prepFiles();

fs.readFile(&#39;./a.txt&#39;, &#39;utf8&#39;, processFile(&#39;a.txt&#39;));
fs.readFile(&#39;./b.txt&#39;, &#39;utf8&#39;, processFile(&#39;b.txt&#39;));


function processFile(fname) {
  return (err, str) =&gt; {
    fs.writeFileSync(`/tmp/${fname}`, str);
    console.log(`DONE writing /tmp/${fname}`);
  };
}

function prepFiles() {
	// our examples read these two files, let&#39;s make sure that they exist on the runkit machine
  fs.writeFileSync(&#39;./a.txt&#39;, &#39;alice!&#39;);
  fs.writeFileSync(&#39;./b.txt&#39;, &#39;bob!&#39;);
}

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Indeed, we can go a step further and remove other redudent code:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;perf-async-3&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;perf-async-3&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const fs = require(&#39;fs&#39;);

prepFiles();

readAndProcessFile(&#39;a.txt&#39;);
readAndProcessFile(&#39;b.txt&#39;);

function readAndProcessFile(name) {
  return fs.readFile(`./${name}`, &#39;utf8&#39;, processFile(name));
}

function processFile(fname) {
  return (err, str) =&gt; {
    fs.writeFileSync(`/tmp/${fname}`, str);
    console.log(`DONE writing /tmp/${fname}`);
  };
}

function prepFiles() {
	// our examples read these two files, let&#39;s make sure that they exist on the runkit machine
  fs.writeFileSync(&#39;./a.txt&#39;, &#39;alice!&#39;);
  fs.writeFileSync(&#39;./b.txt&#39;, &#39;bob!&#39;);
}

&lt;/div&gt;


&lt;h2 id=&#34;high-order-functions-and-closures&#34;&gt;High order functions and closures:&lt;/h2&gt;

&lt;p&gt;With first-class functions, we can write clean, declarative (functional) code.
We don&amp;rsquo;t have to write code that tells the computer what to do, but rather have
the code more closely resemble what we mean (mathematically). For example, we
can process lists as such:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;expressive&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;expressive&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const list = [1, 2, 3, 4];

console.log(filter(list, function (el) { 
  return el &gt; 2;
})); // ??

console.log(map(list, el =&gt; { 
  return el + 42;
})); // ??


function filter(list, pred) {
  const dup = [];
  for (let i = 0; i &lt; list.length; i++) {
    if (pred(list[i])) {
      dup.push(list[i]);
    }
  }
  return dup;
}

function map(list, f) {
  const dup = [];
  for (let i = list.length-1; i &gt;= 0; i--) {
    dup.unshift(f(list[i]));
  }
  return dup;
}

&lt;/div&gt;


&lt;p&gt;Since functions are first-class, we can even define function composition - a
high-order function that takes functions as arguments and returns their
composition. This is for example, useful if we want to apply several functions
over each element of a list:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;hof&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;hof&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const list = [1, 2, 3, 4];

const add42 = (el) =&gt; {
  return el + 42;
};

const mul1337 = (el) =&gt; {
  return el * 1337;
};

console.log(map(map(list, add42), mul1337));
console.log(map(list, compose(mul1337, add42)));

function compose(f, g) {
  return (x) =&gt; {
    return f(g(x));
  };
}

function map(list, f) {
  const dup = [];
  for (let i = list.length-1; i &gt;= 0; i--) {
    dup.unshift(f(list[i]));
  }
  return dup;
}

&lt;/div&gt;


&lt;p&gt;It&amp;rsquo;s important to understand that JavaScript functions are &lt;strong&gt;not&lt;/strong&gt; just function-pointers. They are closures. That is, a pair encoding the function code and the enclosing environment:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;closure&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;closure&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
/* recall our definition:
const add42 = (el) =&gt; {
  return el + 42;
};
*/

function makeAddFunc(offset) {
  return (x) =&gt; {
    return offset + x; // note offset is captured here
  };
}

const add42 = makeAddFunc(42);
const sub42 = makeAddFunc(-42);

console.log(add42(1)); // ??
console.log(add42(42)); // ??

console.log(sub42(1)); // ??
console.log(sub42(42)); // ??


// Note the environment:

function f(x) {
  let y = x;
  return function (z) {
    y += z;
    return y;
  };
}

const h = f(5);
console.log(h(3)); // ??

&lt;/div&gt;


&lt;h2 id=&#34;using-functions-to-implement-modules&#34;&gt;Using functions to implement modules:&lt;/h2&gt;

&lt;p&gt;First-class functions are incredibly powerful. We can even use them to
implement modules. For example, below we define a simple module &lt;code&gt;myModule&lt;/code&gt;, which like Node.js modules contains an &lt;code&gt;exports&lt;/code&gt; object in scope that is, in turn, used to define the module interface.  This module is loaded by calling &lt;code&gt;requireMyModule&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;module&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;module&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
// using our fake require:
{
  const mod = requireMyModule();

  console.log(mod.myVar); // ??
  mod.myFunc(&#34;what?&#34;); // ??
  mod.myFunc(&#34;cse130 is fun!&#34;); // ??
}

function myModule(exports) {
  const secret = &#34;cse130 is fun!&#34;;
  exports.myVar = 42;
  exports.myFunc = function (x) {
    if (x === secret) {
      console.log(&#39;yes!&#39;);
    } else {
      console.log(&#39;guess again!&#39;);
    }
  };
}

function requireMyModule() {
  // create new object that will be populated by the module
  const exports = {};
  myModule(exports);
  return exports;
}

&lt;/div&gt;


&lt;p&gt;Node modules are slightly more complicated, but not that much more! They
basically take the contents of a file, wrap it as if the module was a function
(with &lt;code&gt;&amp;quot;function (exports ) {&amp;quot;&lt;/code&gt; et.c) and then &lt;code&gt;eval&lt;/code&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;../intro-js-code-2&#34;&gt;Continue with objects here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript objects</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js-code-2/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js-code-2/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/css/default.min.css&#34;&gt;
&lt;script src=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/js/highlight.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Below is the code snippet illustrating simple JavaScript objects, created using
the object literal notation:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;receiver&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;receiver&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const obj = {
  &#34;x-w00t&#34;: 10,
  x: 1337,
  f: function (y) {
    this.x++;
    return this.x + y;
  }
};

console.log(obj.x); // ??
console.log(obj.f(3)); // ??
console.log(obj[&#34;x&#34;]); // ??
console.log(obj[&#34;x-w00t&#34;]) // ??

&lt;/div&gt;


&lt;p&gt;Classes are sometimes appropriate, however. For example, they let you define
what every object instance of the class should look like. They also let you
define a single method that is &lt;strong&gt;reused&lt;/strong&gt; by every object instance. This can be
done in modern JavaScript. Below is a code snippet showing the older style of
using functions, however, to accomplish similar goals. This yet-again
demonstrate the power of JavaScript&amp;rsquo;s function (and objects-everywhere) design:&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;class&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;class&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
function Car(make, model) {
  this.make = make;
  this.model = model;
  this.toString = function () {
    return `${this.make}@${this.model}`;
  };
}
Car.mySweetProp = 42;

const f = new Car(&#34;Ford&#34;, &#34;Focus&#34;);
console.log(f.toString());
const t = new Car(&#34;Toyota&#34;, &#34;Corola&#34;);
console.log(t.toString());

// Car.prototype is shared by all objects created by calling new Car(...)
// That&#39;s right you can treat functions like objects!

console.log(f.__proto__ === Car.prototype); // ??

// Let&#39;s define property common to all cars:
Car.prototype.color = &#34;black&#34;;

console.log(f.color); // ??
// getProperty &#34;color&#34; of f
//     if it has it, return it
//     else getProperty &#34;color&#34; of f.__proto__
console.log(t.color); // ??

// Can override the default color that is defined on the prototype:

t.color = &#34;red&#34;;

console.log(t.color); // ??
console.log(f.color); // ??

// We can define a method on the prototype:

Car.prototype.toColorString = function () {
  return `${this.make}, ${this.model}, ${this.color}`;
};

console.log(f.toColorString()); // ??
console.log(t.toColorString()); // ??

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;../intro-js-code-3&#34;&gt;Continue with bad consequences of flexible design&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro and JavaScript</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js/</guid>
      <description>

&lt;h3 id=&#34;lecture-slides-and-code&#34;&gt;Lecture slides and code&lt;/h3&gt;

&lt;p&gt;You can get the slides &lt;a href=&#34;../../slides/js-nutshell.pdf&#34;&gt;here&lt;/a&gt;. The slides refer
to some JavaScript files, provided below. You can also play with this code in
your browser &lt;a href=&#34;../intro-js-code&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;../intro-js-code-2&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;recommended-reading&#34;&gt;Recommended reading&lt;/h3&gt;

&lt;p&gt;If you have not worked with JavaScript before, take some time to familiarize
yourself with the basics of the language, as most of the labs in this class
will be in JavaScript.&lt;/p&gt;

&lt;p&gt;We recommend the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&#34;&gt;Mozilla Developer Network&amp;rsquo;s JavaScript
Guide&lt;/a&gt;, but
there are many other tutorials on the Internet.&lt;/p&gt;

&lt;p&gt;Dave Herman&amp;rsquo;s &lt;a href=&#34;http://effectivejs.com/&#34;&gt;Effective JavaScript&lt;/a&gt; is very good
reference that covers a lot of the JavaScript intricacies.  You will not this
for the class, but if you end up writing JavaScript code in the outside world,
this book is must-read.&lt;/p&gt;

&lt;h3 id=&#34;additional-resources-reading-for-the-curious&#34;&gt;Additional resources/reading for the curious&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/understandinges6/read#leanpub-auto-block-bindings&#34;&gt;Block
bindings&lt;/a&gt;
and the difference between &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, and &lt;code&gt;const&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Why a language like JavaScript took over the world? Not that uncommon, see
&lt;a href=&#34;https://www.jwz.org/doc/worse-is-better.html&#34;&gt;The Rise of &amp;ldquo;Worse is
Better&amp;rdquo;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&#34;&gt;Closures&lt;/a&gt;
explained; see, especially the creating closures in a loop section.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://curiosity-driven.org/private-properties-in-javascript&#34;&gt;Private properties in (modern) JavaScript&lt;/a&gt;; we will revisit the idea of private properties (encapsulation) later in the course.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&#34;&gt;Short intro to memory management for
JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hacks.mozilla.org/category/es6-in-depth/&#34;&gt;ES6 In Depth&lt;/a&gt; contains
more information on the more recent features introduced to JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&#34;&gt;Arrow functions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-files-we-used-in-class&#34;&gt;Source files we used in class&lt;/h3&gt;

&lt;p&gt;Code illustrating how to implement block scoping with functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/scope-modern.js&#34;&gt;scope-modern.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/scope-var.js&#34;&gt;scope-var.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/scope-modernize-var.js&#34;&gt;scope-modernize-var.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/scope-modernize-var-pretty.js&#34;&gt;scope-modernize-var-pretty.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code illustrating the use of callback to perform synchronous and asynchronous
filesystem reads:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/perf-sync.js&#34;&gt;perf-sync.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/perf-async.js&#34;&gt;perf-async.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/perf-async-2.js&#34;&gt;perf-async-2.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/perf-async-3.js&#34;&gt;perf-async-3.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code illustrating the use of high order functions and closures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/expressive.js&#34;&gt;expressive.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/hof.js&#34;&gt;hof.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/closure.js&#34;&gt;closure.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code illustrating the use of functions to implement modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/module-node.js&#34;&gt;module-node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/module.js&#34;&gt;module.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code illustrating the use of arrow function syntax for function expressions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/fat-arrows.js&#34;&gt;fat-arrows.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code illustrating simple methods and constructors for JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/receiver.js&#34;&gt;receiver.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/class.js&#34;&gt;class.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
