<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSE 130</title>
    <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/index.xml</link>
    <description>Recent content on CSE 130</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</managingEditor>
    <webMaster>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</webMaster>
    <lastBuildDate>Fri, 17 Feb 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://cseweb.ucsd.edu/~dstefan/cse130-winter17/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Section notes week 6 -- Haskell: polymorphic programming with typeclasses</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/section-week6/</link>
      <pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/section-week6/</guid>
      <description>&lt;script src=&#34;https://gist.github.com/themattchan/c9a97641fc045378e6bc4fc17df5b4f0.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Intro to Haskell</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/haskell/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/haskell/</guid>
      <description>

&lt;h3 id=&#34;lecture-slides-and-code&#34;&gt;Lecture slides and code&lt;/h3&gt;

&lt;p&gt;You can get the slides &lt;a href=&#34;../../slides/hs-nutshell.pdf&#34;&gt;here&lt;/a&gt;. The slides refer
to a Haskell source file, which you get at &lt;a href=&#34;../../code/intro.hs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;assigned-and-recommended-reading&#34;&gt;Assigned and recommended reading&lt;/h3&gt;

&lt;p&gt;In addition to the &lt;a href=&#34;../../book/ch05.pdf&#34;&gt;assigned reading&lt;/a&gt; you may
wish to look at Brent Yorgey&amp;rsquo;s lectures on School of Haskell, for example
&lt;a href=&#34;https://www.schoolofhaskell.com/school/starting-with-haskell/introduction-to-haskell/1-haskell-basics&#34;&gt;Haskell
Basics&lt;/a&gt;
is a great start. For those interest in the history of Haskell, &lt;a href=&#34;http://dl.acm.org/citation.cfm?doid=1238844.1238856&#34;&gt;A history of
Haskell: Being lazy with
class&lt;/a&gt; is a fantastic
read, and there is a similarly engaging
&lt;a href=&#34;https://www.youtube.com/watch?v=06x8Wf2r2Mc&#34;&gt;talk&lt;/a&gt;.  &lt;a href=&#34;http://dl.acm.org/citation.cfm?doid=1238844.1238856&#34;&gt;A history of Haskell:
Being lazy with class&lt;/a&gt; is
a fantastic read.  We higly recommend &lt;a href=&#34;https://www.haskell.org/tutorial/index.html&#34;&gt;A Gentle Introduction to Haskell
98&lt;/a&gt; and looking at &lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/haskellpa1.html&#34;&gt;The Haskell
2010
Language&lt;/a&gt;.
&lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;Learn You a Haskell for Great Good!&lt;/a&gt; is also a good book to read through.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Currying</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/curry/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/curry/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/css/default.min.css&#34;&gt;
&lt;script src=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/js/highlight.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Below is the code snippet illustrating how to implement multi-argument functions using lambdas and back:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;curry&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;curry&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
// Let&#39;s take a 3 argument function
const foo = (x, y, z) =&gt; x + y + z;
// This function can be curried, i.e., it can be implemented using
// single-argument functions:
const foo_curried = (x) =&gt; (y) =&gt; (z) =&gt; x + y +z;
// a single argument function can always be used to implement a
// multiple-argument functions:
const foo_uncurried = (x,y,z) =&gt; foo_curried(x)(y)(z);
// all the foo&#39;s are equivalent:
// the only thing thatchanges is how we call the function

console.log(foo(1,2,3));
console.log(foo_curried(1)(2)(3));
console.log(foo_uncurried(1,2,3));

&lt;/div&gt;


&lt;p&gt;In a language with only sigle-argument lambdas, you can add syntactic sugar to
implement multiple-argument functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Function declaration: &lt;code&gt;(x1,x2,x3,...,xn) =&amp;gt; e&lt;/code&gt; gets transformed to &lt;code&gt;(x1) =&amp;gt; (x2) =&amp;gt; (x3) =&amp;gt; ... =&amp;gt; (xn) =&amp;gt; e&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function application: &lt;code&gt;f(e1, e2, e3, ..., en)&lt;/code&gt; gets transformed to &lt;code&gt;f(e1)(e2)(e3)...(en)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Section Notes - Week 1, 1/13/2017</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/section-1-notes/</link>
      <pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/section-1-notes/</guid>
      <description>&lt;p&gt;Part 1: Installing Node&lt;/p&gt;

&lt;p&gt;First off, here&amp;rsquo;s how to install Node.
On Windows or Mac you can just get the installer from the
Node site: &lt;a href=&#34;http://nodejs.org&#34;&gt;http://nodejs.org&lt;/a&gt;
For this discussion I&amp;rsquo;m running 6.9.4, current LTS release
This is sufficient for what we want to do.&lt;/p&gt;

&lt;p&gt;On linux, download the tar.xz file, go to its directory and then run e.g.
tar -xvJf node-*.xz&lt;/p&gt;

&lt;p&gt;Move the resulting folder somewhere convenient; I have it at
/home/mario/cse130_node
Then add it to your path: edit your ~/.bashrc, .zshrc, etc
export PATH=/home/mario/cse130_node/bin:$PATH&lt;/p&gt;

&lt;p&gt;now when you run node you should get the node.js REPL. yay!&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s also NVM (Node Version Manager),
which unfortunately doesn&amp;rsquo;t work on my machine.
There&amp;rsquo;s a script on their site (nvm.sh) you can run to install it manually.
This is worth knowing about because it makes it easier to keep multiple
versions of NVM around.&lt;/p&gt;

&lt;p&gt;Part 2: The JS Event Loop&lt;/p&gt;

&lt;p&gt;This provides a relatively simple concurrency model, so the
programmer doesn&amp;rsquo;t really have much to think about: run what you can;
wait when you need to. While it&amp;rsquo;s not
perfect one can get a lot of mileage out of it, especially when one
is running many I/O intensive (or otherwise waiting-intensive)
tasks at the same time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let l = setInterval(function () {console.log(&amp;quot;hello&amp;quot;);}, 1000);
clearInterval(l);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A more motivated node example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;fs.watch(&#39;.&#39;, function (eventType, filename)
 {if(filename) console.log(`change to ${filename}`);});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can get notified every time our file changes! Sweet.&lt;/p&gt;

&lt;p&gt;This is what &amp;ldquo;callbacks&amp;rdquo; are all about: rather than, for instance,
blocking execution when we read a large file, we can instead
call a (higher order)
function like fs.readFile, and you give it a function specifying
what should be done when the file is loaded.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a fun example: run mkfifo pipe at the shell, then at node&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(fs.readFileSync(&amp;quot;./pipe&amp;quot;).toString());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in another console say
cat pipe
type some stuff, then press control-D
notice what&amp;rsquo;s going on in the other console while you&amp;rsquo;re typing text&lt;/p&gt;

&lt;p&gt;now change that line to&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;fs.readFile(&amp;quot;./pipe&amp;quot;, (err, data) =&amp;gt; console.log(data.toString()))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;see what happens now! (note that the data now comes in a Buffer
data structure which is why we must convert to string)&lt;/p&gt;

&lt;p&gt;Part 4: Lambda Calculus
&amp;ldquo;Dude, Where&amp;rsquo;s My Data??&amp;rdquo;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll proceed in JavaScript, but imagine you&amp;rsquo;re sitting down with the
raw lambda calculus and want to write a program. A natural first question
is the above. Namely, the lambda calculus doesn&amp;rsquo;t seem to come with any
types for representing data, other than functions!&lt;/p&gt;

&lt;p&gt;While we could add data types to the language (which is the approach
nearly all languages take, including Haskell) there is another approach
we can take: instead we can use what&amp;rsquo;s called Church encoding,
essentially encoding data as control flow.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start simple: booleans. How can we simulate their behavior? We
have nothing but functions.&lt;/p&gt;

&lt;p&gt;This seems tricky, so let&amp;rsquo;s try turning the problem on its head:
how can we &lt;em&gt;use&lt;/em&gt; booleans? Fundamentally they only contain one bit
of information; we can process that fully with a single if-else
statement: if(b) then c1 else c2&lt;/p&gt;

&lt;p&gt;In fact, we can see this &amp;ldquo;if&amp;rdquo; behavior as completely characterizing booleans.
Suppose we had, for each boolean, a function ifb, that took two
functions c1 and c2, and ran the first one if true, second if false?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;ifb(true, c1, c2) = c1()
ifb(false, c1, c2) = c2()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;equivalently we could see these as two functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;ifbtrue(c1, c2) = c1()
ifbfalse(c1, c2) = c2()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in fact, we can see ifbtrue as capturing a notion of
&amp;ldquo;true boolean value&amp;rdquo; and likewise ifbfalse. From now on we&amp;rsquo;ll just
write true for ifbtrue, false for ifbfalse&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let mytrue = (c1, c2) =&amp;gt; c1;
let myfalse = (c1, c2) =&amp;gt; c2;

let myif = (b, c1, c2) =&amp;gt; b(c1, c2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have booleans, we can construct pairs. Any ideas how?&lt;/p&gt;

&lt;p&gt;OK, so a pair is really just two pieces of data, with projections
(think &amp;ldquo;field names&amp;rdquo;) for the two elements. Building off our booleans,
we can say that &amp;ldquo;true&amp;rdquo; is the field name of the first element, and
false the second. Projection looks like:&lt;/p&gt;

&lt;p&gt;projtrue((c1, c2)) = c1()
projfalse((c1, c2)) = c2()&lt;/p&gt;

&lt;p&gt;more concisely,&lt;/p&gt;

&lt;p&gt;proj(b, (c1, c2)) = if b then c1() else c2()&lt;/p&gt;

&lt;p&gt;In fact, we can view pairs as precisely these projection functions:
proj(b, p) = b(p) = if b then p(true) else p(false)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var mypaircon = (c1, c2) =&amp;gt; ((b) =&amp;gt; b(c1, c2));
var myproj1 = (p) =&amp;gt; p(mytrue);
var myproj2 = (p) =&amp;gt; p(myfalse);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What about numbers?
Well, with booleans and pairs, we have enough to represent fixed-width ints
(noting that we can make pairs of pairs, and pairs of pairs of pairs,
and so on, allowing us to represent arbitrary length bit vectors)&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an encoding that can represent all numbers, called the &amp;ldquo;Church Numerals&amp;rdquo;
If you&amp;rsquo;re curious, ask offline! They are complicated but similar in spirit to this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript No-Nos</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js-code-3/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js-code-3/</guid>
      <description>

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/css/default.min.css&#34;&gt;
&lt;script src=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/js/highlight.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Below are code snippets that illustrate some of the flexible features of
JavaScript and how they can introduce unexpected/unintuitive behavior.  There
are many more; see Appendix B of Crockford&amp;rsquo;s &lt;em&gt;JavaScript: The Good Parts&lt;/em&gt;.
Please note that there are useful, positive side of most of these; every
language design/implementation decision is a trade-off.&lt;/p&gt;

&lt;h3 id=&#34;automatic-semicolon-insertion&#34;&gt;Automatic semicolon insertion&lt;/h3&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;auto-semi&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;auto-semi&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
function f() {
  return 3;
}
function g() {
  return
  3;
}
console.log(f()); // ??
console.log(g()); // ??

&lt;/div&gt;


&lt;h3 id=&#34;eval&#34;&gt;Eval&lt;/h3&gt;

&lt;p&gt;JavaScript&amp;rsquo;s &lt;code&gt;eval&lt;/code&gt; function can be used load and execute new code, at runtime.
This is generally considered a bad/dangerous idea, but nevertheless useful in
some cases. Beyond security implications (mostly a concern in the browser since
eval can easily be leverage to carry out &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_scripting&#34;&gt;XSS
attacks&lt;/a&gt;), however, the
behavior of eval differs when you call it directly or indirectly. This
difference was introduced in the name of performance. (Arguably okay since you
should not be using eval very much, but not great.)&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;nono-eval&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;nono-eval&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
global.x = 33;
{
  const x = 44;
  const ev = eval;
  console.log(eval(&#34;x&#34;)); // ??
  console.log(ev(&#34;x&#34;)); // ??
}

&lt;/div&gt;


&lt;h3 id=&#34;implicit-casting&#34;&gt;Implicit casting&lt;/h3&gt;

&lt;p&gt;See the sarcastic &lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;WAT&lt;/a&gt; video.&lt;/p&gt;

&lt;h3 id=&#34;monkeypatching&#34;&gt;Monkeypatching&lt;/h3&gt;

&lt;p&gt;Because JavaScript lets you modify arbitrary objects and their prototypes,
running untrusted code safely is extremely difficult to do. (If you&amp;rsquo;re
interested in this, come talk to me; this is some of my research.)
See the examples
&lt;a href=&#34;https://github.com/google/caja/wiki/GlobalObjectPoisoning&#34;&gt;here&lt;/a&gt; on global
object poisoning. Here is the simplest:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;poisoning&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;poisoning&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
// suppose add was exposed by a third-party library
function add(x, y) {
  // Poison the Object prototype by redefining toString,
  // which is called when objects are implicitly casted to
  // strings. The modified function modifies the object (this), by
  // setting name to &#39;mud&#39;;
  Object.prototype.toString = function () {
    var name = this.name ;
    this.name = &#39;mud&#39;;
    return &#39;HA &#39; + name + &#39;.  IM STEALIN UR CODEZ!&#39;;
  };
  return x + y;
}

var o = { name: &#39;Bingo&#39; };
console.log(add(3,4)); // calling add poisoned Object.prototype
console.log(&#39;&#39; + o);
console.log(&#39;Your name is now &#39; + o.name);

&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>The power of JavaScript first-class functions</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js-code/</link>
      <pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js-code/</guid>
      <description>

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/css/default.min.css&#34;&gt;
&lt;script src=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/js/highlight.min.js&#34;&gt;&lt;/script&gt;


&lt;h3 id=&#34;block-scoping-with-functions&#34;&gt;Block scoping with functions:&lt;/h3&gt;

&lt;p&gt;Modern JavaScript has block scoping when using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; binders:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;scope-modern&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;scope-modern&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
function hello(x) {
  console.log(`A: x = ${x}`); // ??
  {
    const x = 45;
    console.log(`B: x = ${x}`); // ??
  }
  {
    console.log(`C: x = ${x}`); // ??
  }
}
hello(42);

&lt;/div&gt;


&lt;p&gt;This is not true for &lt;code&gt;var&lt;/code&gt; binders, which are scoped to the nearest function scope (if one exists, otherwise, the global scope):&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;scope-var&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;scope-var&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
function hello(x) {
  console.log(`A: x = ${x}`); // ??
  {
    var x = 45;
    console.log(`B: x = ${x}`); // ??
  }
  {
    console.log(`C: x = ${x}`); // ??
  }
}

hello(42);

&lt;/div&gt;


&lt;p&gt;We can, however, introduce block scoping to code that only uses &lt;code&gt;var&lt;/code&gt;
declarations by using first-class functions to create a new function scope:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;scope-modernize-var&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;scope-modernize-var&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
function hello(x) {
  console.log(`A: x = ${x}`); // ??
  (function () {
    var x = 45;
    console.log(`B: x = ${x}`); // ??
  })();
  (function () {
    console.log(`C: x = ${x}`); // ??
  })();
}

hello(42);

&lt;/div&gt;


&lt;p&gt;Rather than use the verbose &lt;code&gt;function&lt;/code&gt; declarations, we can also write anonymous functions using the fat arrow (&lt;code&gt;=&amp;gt;&lt;/code&gt;), as such:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;scope-modernize-var-pretty&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;scope-modernize-var-pretty&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
function hello(x) {
  console.log(`A: x = ${x}`); // ??
  (() =&gt; {
    var x = 45;
    console.log(`B: x = ${x}`); // ??
  })();
  (() =&gt; {
    console.log(`C: x = ${x}`); // ??
  })();
}

hello(42);

&lt;/div&gt;


&lt;p&gt;Fat arrows or &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&#34;&gt;arrow
functions&lt;/a&gt;
can make our code much cleaner and using them will make the lambda calculus
lecture much easier too. Below is some code showing the use of fat arrows and
how more syntax goes away as our functions get simpler:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;fat-arrows&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;fat-arrows&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const f = (x) =&gt; { 
  console.log(&#39;hello!&#39;);
  return x;
};

f(34); // ??

// if your function is simple, and only has one expression, can write it as:
const g = (x) =&gt;  x ;
// no more {}&#39; and &#34;return&#34;!
console.log(g(33));

// In fact, if function only has 1 argument, you can even remove the ()&#39;s:
const h = x =&gt;  x+3;
console.log(h(33)); // ??

// We can also use it immediately, inline:
console.log(((x, y) =&gt; x + y) (4, 5)) ; // ??

&lt;/div&gt;


&lt;h2 id=&#34;callbacks-for-performing-concurrent-asynchronous-filesystem-reads&#34;&gt;Callbacks for performing concurrent, asynchronous filesystem reads:&lt;/h2&gt;

&lt;p&gt;Node.js ships with a code JavaScript library that can be used to read and write files.
Node.js exposes functions for reading (writing) files synchronously:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;perf-sync&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;perf-sync&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const fs = require(&#39;fs&#39;);

prepFiles(); // ignore, this we&#39;re just calling this function to populate filesystem

const r1 = fs.readFileSync(&#39;./a.txt&#39;, &#39;utf8&#39;); // blocks until read is done
processFile(&#39;a.txt&#39;, r1); //blocks until processing (write) is done
const r2 = fs.readFileSync(&#39;./b.txt&#39;, &#39;utf8&#39;); // etc.
processFile(&#39;b.txt&#39;, r2);

// note that you can declare a function after the point it&#39;s used. Hoisting
// essentially moves it to the top.
function processFile(fname, str) {
  fs.writeFileSync(`/tmp/${fname}`, str);
  console.log(`DONE writing /tmp/${fname}`);
}

function prepFiles() {
	// our examples read these two files, let&#39;s make sure that they exist on the runkit machine
  fs.writeFileSync(&#39;./a.txt&#39;, &#39;alice!&#39;);
  fs.writeFileSync(&#39;./b.txt&#39;, &#39;bob!&#39;);
}

&lt;/div&gt;


&lt;p&gt;Note that each of the reads and writes block, waiting for the files to be read and processed. But this need not be the case. We can leverage the fact that the underling runtime and OS have concurrency and we can read the files concurrently:
&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;perf-async&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;perf-async&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const fs = require(&#39;fs&#39;);

prepFiles(); // ignore, this we&#39;re just calling this function to populate filesystem

fs.readFile(&#39;./a.txt&#39;, &#39;utf8&#39;, cb1); // returns immediately, cb1 is queued on the event loop and called later when actual file read is done
fs.readFile(&#39;./b.txt&#39;, &#39;utf8&#39;, cb2); // returns immediately, &#34; &#34;

function processFile(fname, str) {
  fs.writeFileSync(`/tmp/${fname}`, str);
  console.log(`DONE writing /tmp/${fname}`);
}

function cb1(err, str) {
  processFile(&#39;a.txt&#39;, str);
}

function cb2(err, str) {
  processFile(&#39;b.txt&#39;, str);
}

function prepFiles() {
	// our examples read these two files, let&#39;s make sure that they exist on the runkit machine
  fs.writeFileSync(&#39;./a.txt&#39;, &#39;alice!&#39;);
  fs.writeFileSync(&#39;./b.txt&#39;, &#39;bob!&#39;);
}

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The above code tells the Node.js runtime to read the file &lt;code&gt;a,txt&lt;/code&gt;, without
blocking, and call function &lt;code&gt;cb1&lt;/code&gt; with the error condition and data once it
read the file (or failed). Note that JavaScript always runs code to completion for each &lt;em&gt;event loop&lt;/em&gt;.
In the first event loop we tell the runtime to read files, and the runtime, in later event loops, will call our callback functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge:&lt;/strong&gt; further modify this code to eliminate the synchronous writes.&lt;/p&gt;

&lt;p&gt;Since JavaScript has first-class functions, we can clean up the above code and move the repeated code into processFie (which now returns a function that is pased to &lt;code&gt;readFile&lt;/code&gt;):
&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;perf-async-2&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;perf-async-2&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const fs = require(&#39;fs&#39;);
prepFiles();

fs.readFile(&#39;./a.txt&#39;, &#39;utf8&#39;, processFile(&#39;a.txt&#39;));
fs.readFile(&#39;./b.txt&#39;, &#39;utf8&#39;, processFile(&#39;b.txt&#39;));


function processFile(fname) {
  return (err, str) =&gt; {
    fs.writeFileSync(`/tmp/${fname}`, str);
    console.log(`DONE writing /tmp/${fname}`);
  };
}

function prepFiles() {
	// our examples read these two files, let&#39;s make sure that they exist on the runkit machine
  fs.writeFileSync(&#39;./a.txt&#39;, &#39;alice!&#39;);
  fs.writeFileSync(&#39;./b.txt&#39;, &#39;bob!&#39;);
}

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Indeed, we can go a step further and remove other redudent code:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;perf-async-3&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;perf-async-3&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const fs = require(&#39;fs&#39;);

prepFiles();

readAndProcessFile(&#39;a.txt&#39;);
readAndProcessFile(&#39;b.txt&#39;);

function readAndProcessFile(name) {
  return fs.readFile(`./${name}`, &#39;utf8&#39;, processFile(name));
}

function processFile(fname) {
  return (err, str) =&gt; {
    fs.writeFileSync(`/tmp/${fname}`, str);
    console.log(`DONE writing /tmp/${fname}`);
  };
}

function prepFiles() {
	// our examples read these two files, let&#39;s make sure that they exist on the runkit machine
  fs.writeFileSync(&#39;./a.txt&#39;, &#39;alice!&#39;);
  fs.writeFileSync(&#39;./b.txt&#39;, &#39;bob!&#39;);
}

&lt;/div&gt;


&lt;h2 id=&#34;high-order-functions-and-closures&#34;&gt;High order functions and closures:&lt;/h2&gt;

&lt;p&gt;With first-class functions, we can write clean, declarative (functional) code.
We don&amp;rsquo;t have to write code that tells the computer what to do, but rather have
the code more closely resemble what we mean (mathematically). For example, we
can process lists as such:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;expressive&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;expressive&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const list = [1, 2, 3, 4];

console.log(filter(list, function (el) { 
  return el &gt; 2;
})); // ??

console.log(map(list, el =&gt; { 
  return el + 42;
})); // ??


function filter(list, pred) {
  const dup = [];
  for (let i = 0; i &lt; list.length; i++) {
    if (pred(list[i])) {
      dup.push(list[i]);
    }
  }
  return dup;
}

function map(list, f) {
  const dup = [];
  for (let i = list.length-1; i &gt;= 0; i--) {
    dup.unshift(f(list[i]));
  }
  return dup;
}

&lt;/div&gt;


&lt;p&gt;Since functions are first-class, we can even define function composition - a
high-order function that takes functions as arguments and returns their
composition. This is for example, useful if we want to apply several functions
over each element of a list:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;hof&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;hof&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const list = [1, 2, 3, 4];

const add42 = (el) =&gt; {
  return el + 42;
};

const mul1337 = (el) =&gt; {
  return el * 1337;
};

console.log(map(map(list, add42), mul1337));
console.log(map(list, compose(mul1337, add42)));

function compose(f, g) {
  return (x) =&gt; {
    return f(g(x));
  };
}

function map(list, f) {
  const dup = [];
  for (let i = list.length-1; i &gt;= 0; i--) {
    dup.unshift(f(list[i]));
  }
  return dup;
}

&lt;/div&gt;


&lt;p&gt;It&amp;rsquo;s important to understand that JavaScript functions are &lt;strong&gt;not&lt;/strong&gt; just function-pointers. They are closures. That is, a pair encoding the function code and the enclosing environment:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;closure&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;closure&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
/* recall our definition:
const add42 = (el) =&gt; {
  return el + 42;
};
*/

function makeAddFunc(offset) {
  return (x) =&gt; {
    return offset + x; // note offset is captured here
  };
}

const add42 = makeAddFunc(42);
const sub42 = makeAddFunc(-42);

console.log(add42(1)); // ??
console.log(add42(42)); // ??

console.log(sub42(1)); // ??
console.log(sub42(42)); // ??


// Note the environment:

function f(x) {
  let y = x;
  return function (z) {
    y += z;
    return y;
  };
}

const h = f(5);
console.log(h(3)); // ??

&lt;/div&gt;


&lt;h2 id=&#34;using-functions-to-implement-modules&#34;&gt;Using functions to implement modules:&lt;/h2&gt;

&lt;p&gt;First-class functions are incredibly powerful. We can even use them to
implement modules. For example, below we define a simple module &lt;code&gt;myModule&lt;/code&gt;, which like Node.js modules contains an &lt;code&gt;exports&lt;/code&gt; object in scope that is, in turn, used to define the module interface.  This module is loaded by calling &lt;code&gt;requireMyModule&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;module&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;module&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
// using our fake require:
{
  const mod = requireMyModule();

  console.log(mod.myVar); // ??
  mod.myFunc(&#34;what?&#34;); // ??
  mod.myFunc(&#34;cse130 is fun!&#34;); // ??
}

function myModule(exports) {
  const secret = &#34;cse130 is fun!&#34;;
  exports.myVar = 42;
  exports.myFunc = function (x) {
    if (x === secret) {
      console.log(&#39;yes!&#39;);
    } else {
      console.log(&#39;guess again!&#39;);
    }
  };
}

function requireMyModule() {
  // create new object that will be populated by the module
  const exports = {};
  myModule(exports);
  return exports;
}

&lt;/div&gt;


&lt;p&gt;Node modules are slightly more complicated, but not that much more! They
basically take the contents of a file, wrap it as if the module was a function
(with &lt;code&gt;&amp;quot;function (exports ) {&amp;quot;&lt;/code&gt; et.c) and then &lt;code&gt;eval&lt;/code&gt; it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;../intro-js-code-2&#34;&gt;Continue with objects here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript objects</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js-code-2/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js-code-2/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/css/default.min.css&#34;&gt;
&lt;script src=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/js/highlight.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Below is the code snippet illustrating simple JavaScript objects, created using
the object literal notation:&lt;/p&gt;

&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;receiver&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;receiver&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
const obj = {
  &#34;x-w00t&#34;: 10,
  x: 1337,
  f: function (y) {
    this.x++;
    return this.x + y;
  }
};

console.log(obj.x); // ??
console.log(obj.f(3)); // ??
console.log(obj[&#34;x&#34;]); // ??
console.log(obj[&#34;x-w00t&#34;]) // ??

&lt;/div&gt;


&lt;p&gt;Classes are sometimes appropriate, however. For example, they let you define
what every object instance of the class should look like. They also let you
define a single method that is &lt;strong&gt;reused&lt;/strong&gt; by every object instance. This can be
done in modern JavaScript. Below is a code snippet showing the older style of
using functions, however, to accomplish similar goals. This yet-again
demonstrate the power of JavaScript&amp;rsquo;s function (and objects-everywhere) design:&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://embed.runkit.com&#34; data-element-id=&#34;class&#34;&gt;&lt;/script&gt;
&lt;div id=&#34;class&#34; nodeVersion=&#34;6.9.2&#34;&gt;
  
function Car(make, model) {
  this.make = make;
  this.model = model;
  this.toString = function () {
    return `${this.make}@${this.model}`;
  };
}
Car.mySweetProp = 42;

const f = new Car(&#34;Ford&#34;, &#34;Focus&#34;);
console.log(f.toString());
const t = new Car(&#34;Toyota&#34;, &#34;Corola&#34;);
console.log(t.toString());

// Car.prototype is shared by all objects created by calling new Car(...)
// That&#39;s right you can treat functions like objects!

console.log(f.__proto__ === Car.prototype); // ??

// Let&#39;s define property common to all cars:
Car.prototype.color = &#34;black&#34;;

console.log(f.color); // ??
// getProperty &#34;color&#34; of f
//     if it has it, return it
//     else getProperty &#34;color&#34; of f.__proto__
console.log(t.color); // ??

// Can override the default color that is defined on the prototype:

t.color = &#34;red&#34;;

console.log(t.color); // ??
console.log(f.color); // ??

// We can define a method on the prototype:

Car.prototype.toColorString = function () {
  return `${this.make}, ${this.model}, ${this.color}`;
};

console.log(f.toColorString()); // ??
console.log(t.toColorString()); // ??

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;../intro-js-code-3&#34;&gt;Continue with bad consequences of flexible design&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro and JavaScript</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/notes/intro-js/</guid>
      <description>

&lt;h3 id=&#34;lecture-slides-and-code&#34;&gt;Lecture slides and code&lt;/h3&gt;

&lt;p&gt;You can get the slides &lt;a href=&#34;../../slides/js-nutshell.pdf&#34;&gt;here&lt;/a&gt;. The slides refer
to some JavaScript files, provided below. You can also play with this code in
your browser &lt;a href=&#34;../intro-js-code&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;../intro-js-code-2&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;recommended-reading&#34;&gt;Recommended reading&lt;/h3&gt;

&lt;p&gt;If you have not worked with JavaScript before, take some time to familiarize
yourself with the basics of the language, as most of the labs in this class
will be in JavaScript.&lt;/p&gt;

&lt;p&gt;We recommend the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&#34;&gt;Mozilla Developer Network&amp;rsquo;s JavaScript
Guide&lt;/a&gt;, but
there are many other tutorials on the Internet.&lt;/p&gt;

&lt;p&gt;Dave Herman&amp;rsquo;s &lt;a href=&#34;http://effectivejs.com/&#34;&gt;Effective JavaScript&lt;/a&gt; is very good
reference that covers a lot of the JavaScript intricacies.  You will not this
for the class, but if you end up writing JavaScript code in the outside world,
this book is must-read.&lt;/p&gt;

&lt;h3 id=&#34;additional-resources-reading-for-the-curious&#34;&gt;Additional resources/reading for the curious&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/understandinges6/read#leanpub-auto-block-bindings&#34;&gt;Block
bindings&lt;/a&gt;
and the difference between &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, and &lt;code&gt;const&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Why a language like JavaScript took over the world? Not that uncommon, see
&lt;a href=&#34;https://www.jwz.org/doc/worse-is-better.html&#34;&gt;The Rise of &amp;ldquo;Worse is
Better&amp;rdquo;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&#34;&gt;Closures&lt;/a&gt;
explained; see, especially the creating closures in a loop section.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://curiosity-driven.org/private-properties-in-javascript&#34;&gt;Private properties in (modern) JavaScript&lt;/a&gt;; we will revisit the idea of private properties (encapsulation) later in the course.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&#34;&gt;Short intro to memory management for
JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hacks.mozilla.org/category/es6-in-depth/&#34;&gt;ES6 In Depth&lt;/a&gt; contains
more information on the more recent features introduced to JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&#34;&gt;Arrow functions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;source-files-we-used-in-class&#34;&gt;Source files we used in class&lt;/h3&gt;

&lt;p&gt;Code illustrating how to implement block scoping with functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/scope-modern.js&#34;&gt;scope-modern.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/scope-var.js&#34;&gt;scope-var.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/scope-modernize-var.js&#34;&gt;scope-modernize-var.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/scope-modernize-var-pretty.js&#34;&gt;scope-modernize-var-pretty.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code illustrating the use of callback to perform synchronous and asynchronous
filesystem reads:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/perf-sync.js&#34;&gt;perf-sync.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/perf-async.js&#34;&gt;perf-async.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/perf-async-2.js&#34;&gt;perf-async-2.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/perf-async-3.js&#34;&gt;perf-async-3.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code illustrating the use of high order functions and closures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/expressive.js&#34;&gt;expressive.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/hof.js&#34;&gt;hof.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/closure.js&#34;&gt;closure.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code illustrating the use of functions to implement modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/module-node.js&#34;&gt;module-node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/module.js&#34;&gt;module.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code illustrating the use of arrow function syntax for function expressions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/fat-arrows.js&#34;&gt;fat-arrows.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code illustrating simple methods and constructors for JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/receiver.js&#34;&gt;receiver.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../code/intro-js/class.js&#34;&gt;class.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Course organization and policies</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/about/</link>
      <pubDate>Mon, 05 Sep 2016 20:19:41 -0700</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/about/</guid>
      <description>

&lt;p&gt;The course consists of lectures, written homeworks, and programming
assignments.  The goal of the course is to &lt;strong&gt;(1)&lt;/strong&gt; familiarize you with various
modern programming language concepts and paradigms and &lt;strong&gt;(2)&lt;/strong&gt; get you to think
about and understand the design trade-offs and implementations of different
language features. We will use real-world languages (e.g., JavaScript, Haskell,
and C++) to explore the different concepts. But, we will not cover any one
language in full &amp;ndash; this course is not meant to make you a proficient
programmer, learning how to proficiently program in any of these languages is a
course in of itself.&lt;/p&gt;

&lt;h4 id=&#34;grading&#34;&gt;Grading&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;5% Participation/pre-lecture readings&lt;/li&gt;
&lt;li&gt;30% Homework and programming assignments&lt;/li&gt;
&lt;li&gt;30% Midterm exam&lt;/li&gt;
&lt;li&gt;35% Final exam&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;participation-pre-lecture-readings&#34;&gt;Participation/pre-lecture readings&lt;/h6&gt;

&lt;p&gt;Before each class there will be some assigned reading. You are expected to do
the reading and have at least a vague understanding of the concepts that will
be discussed in class. This will allow us to spend the lecture time to solidify
your understanding.  Asking and answering questions in class, on Piazza, or
during office hours counts towards your class participation.&lt;/p&gt;

&lt;h6 id=&#34;homework-and-programming-assignments&#34;&gt;Homework and programming assignments&lt;/h6&gt;

&lt;p&gt;We will have almost weekly assignments, in the form of written homeworks and/or
programming assignments. These assignments are meant to both reinforce your
knowledge of the concepts covered in lecture and get you to think about PL
beyond lecture (e.g., if you were tasked with designing a new language).&lt;/p&gt;

&lt;p&gt;You are expected to work on written assignments in groups of 3. All written
homework must be typeset and submitted as a PDF using the online submission
tool.  All written assignments must be submitted as a group.&lt;/p&gt;

&lt;p&gt;You are expected to work on the programming assignments by yourself. You may
discuss the assignments with students from the course, in general, but not any
specific solution.&lt;/p&gt;

&lt;p&gt;You have 7 late days that may be used towards homeworks and assignments. See
the &lt;a href=&#34;../slides/intro.pdf&#34;&gt;intro slides&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;If you consult anything (books, academic papers, internet resources, people not
in your group) when working on the assignments, note this in your submission.
We encourage outside learning but expect you to not seek out specific details
about a solution &amp;ndash; anything submitted should be considered your own work.
Similarly, you are expected to not publish or otherwise share your solutions at
any point (even after the class is over).&lt;/p&gt;

&lt;p&gt;If you are unsure about what is allowed, please ask the course staff.&lt;/p&gt;

&lt;h6 id=&#34;exams&#34;&gt;Exams&lt;/h6&gt;

&lt;p&gt;The midterm exam will be held on &lt;strong&gt;February 22&lt;/strong&gt;, in class. The midterm is
&lt;strong&gt;closed-book&lt;/strong&gt;, but you may use a double-sided cheat sheet (letter-size).&lt;/p&gt;

&lt;p&gt;The final exam will be held on &lt;strong&gt;March 22&lt;/strong&gt; in &lt;strong&gt;TBD&lt;/strong&gt;. You &lt;strong&gt;must&lt;/strong&gt; take the
exam at this time and location.  The final is &lt;strong&gt;closed-book&lt;/strong&gt;, but you may use
2 double-sided cheat sheets (letter-size).&lt;/p&gt;

&lt;p&gt;The exams will make up 65% of your grade. Since the final is cumulative your
midterm grade will be calculated as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;midterm &amp;gt; 0 ?  max(final, midterm) : 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that (1) you basically get a second chance if you don&amp;rsquo;t so well on
the midterm and (2) you must show up to both the midterm and the final.  If you
need to miss either exam because of a documented medical emergency, contact the
instructor immediately.&lt;/p&gt;

&lt;h5 id=&#34;academic-integrity-and-student-conduct&#34;&gt;Academic integrity and student conduct&lt;/h5&gt;

&lt;p&gt;By taking this course, you implicitly agree to abide by the UCSD policies on &lt;a
href=&#34;https://senate.ucsd.edu/Operating-Procedures/Senate-Manual/appendices/2&#34;&gt;Integrity
of Scholarship&lt;/a&gt; and &lt;a
href=&#34;https://students.ucsd.edu/sponsor/student-conduct/&#34;&gt;Student Conduct&lt;/a&gt;.
University rules on integrity of scholarship and code of conduct are taken
seriously and will be enforced.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Syllabus</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/syllabus/</link>
      <pubDate>Mon, 05 Sep 2016 20:19:41 -0700</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/syllabus/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cseweb.ucsd.edu/~dstefan/cse130-winter17/css/bootstrap-table.css&#34;&gt;

&lt;table class=&#34;table table-hover&#34;&gt;
  &lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;Topic and readings&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;td colspan=&#34;3&#34; class=&#34;topic&#34;&gt;Functions&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class=&#34;warning&#34;&gt; &lt;th class=&#34;date&#34;&gt;Jan 09&lt;/th&gt;
    &lt;td&gt;
      Intro and JavaScript crash course
      &lt;br/&gt;[ &lt;a href=&#34;../notes/intro-js&#34;&gt;notes&lt;/a&gt; | &lt;a href=&#34;../slides/intro.pdf&#34;&gt;intro slides&lt;/a&gt; | &lt;a href=&#34;../slides/js-nutshell.pdf&#34;&gt;JavaScript slides&lt;/a&gt; | &lt;a href=&#34;../notes/intro-js-code&#34;&gt;function code&lt;/a&gt; ]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt; &lt;th class=&#34;date&#34;&gt;Jan 11&lt;/th&gt;
    &lt;td&gt;
      JavaScript crash course (cont)
      &lt;br/&gt;[ &lt;a href=&#34;../slides/js-nutshell-cont.pdf&#34;&gt;JavaScript (cont) slides&lt;/a&gt; | &lt;a href=&#34;../notes/intro-js-code-2&#34;&gt;obj code&lt;/a&gt; | &lt;a href=&#34;../notes/intro-js-code-2&#34;&gt;nono code&lt;/a&gt;]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class=&#34;info&#34;&gt; &lt;th class=&#34;date&#34;&gt;Jan 16&lt;/th&gt;
    &lt;td&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Martin_Luther_King_Jr.&#34;&gt;MLK&lt;/a&gt;- no class&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt; &lt;th class=&#34;date&#34;&gt;Jan 18&lt;/th&gt;
    &lt;td&gt;
      Foundations and the lambda calculus
      &lt;br/&gt;[ readings: 4.1.2, 4.2, &lt;a href=&#34;http://www.cse.chalmers.se/research/group/logic/TypesSS05/Extra/geuvers.pdf&#34;&gt;optional additional material&lt;/a&gt; | 
      &lt;a href=&#34;../slides/lambda-calculus.pdf&#34;&gt;slides&lt;/a&gt;]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class=&#34;warning&#34;&gt; &lt;th class=&#34;date&#34;&gt;Jan 23&lt;/th&gt;
    &lt;td&gt;
      Lambda calculus (cont)
      &lt;br/&gt;[ &lt;a href=&#34;../slides/lambda-calculus-cont.pdf&#34;&gt;slides&lt;/a&gt; | &lt;a href=&#34;../notes/curry&#34;&gt;notes on currying&lt;/a&gt; ] 
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt; &lt;th class=&#34;date&#34;&gt;Jan 25&lt;/th&gt;
    &lt;td&gt;
      Lambda calculus (cont)
      &lt;br/&gt;[ &lt;a href=&#34;../slides/lambda-calculus-cont.pdf&#34;&gt;slides&lt;/a&gt; | &lt;a href=&#34;../notes/curry&#34;&gt;notes on currying&lt;/a&gt; ] 
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class=&#34;warning&#34;&gt; &lt;th class=&#34;date&#34;&gt;Jan 30&lt;/th&gt;
    &lt;td&gt;
      Scope, storage management, and function implementation
      &lt;br/&gt; [ readings: chapter 7 | &lt;a href=&#34;../slides/scope.pdf&#34;&gt;slides&lt;/a&gt; | &lt;a href=&#34;http://pythontutor.com/javascript.html&#34;&gt;great online scope-learning tool&lt;/a&gt;]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan=&#34;3&#34; class=&#34;topic&#34;&gt;Types&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt; &lt;th class=&#34;date&#34;&gt;Feb 01&lt;/th&gt;
    &lt;td&gt;
      Haskell crash course&lt;br/&gt;
      [ readings: &lt;a href=&#34;../book/ch05.pdf&#34;&gt;new chapter 5&lt;/a&gt; | &lt;a href=&#34;../slides/hs-nutshell.pdf&#34;&gt;slides&lt;/a&gt; | &lt;a href=&#34;../notes/haskell&#34;&gt;notes&lt;/a&gt;]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class=&#34;warning&#34;&gt; &lt;th class=&#34;date&#34;&gt;Feb 06&lt;/th&gt;
    &lt;td&gt;
      Haskell crash course (cont)
      [ &lt;a href=&#34;../code/intro.hs&#34;&gt;code&lt;/a&gt; | &lt;a href=&#34;../notes/haskell&#34;&gt;notes&lt;/a&gt;]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt; &lt;th class=&#34;date&#34;&gt;Feb 08&lt;/th&gt;
    &lt;td&gt;
      Haskell and introduction to types&lt;/br&gt;
      [ readings: &lt;a href=&#34;../book/ch06.pdf&#34;&gt;new chapter 6&lt;/a&gt; | &lt;a href=&#34;../slides/types.pdf&#34;&gt;slides&lt;/a&gt;]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class=&#34;warning&#34;&gt; &lt;th class=&#34;date&#34;&gt;Feb 13&lt;/th&gt;
    &lt;td&gt;
      Type polymorphism and type inference&lt;br/&gt;
      [ readings: &lt;a href=&#34;../book/ch07.pdf&#34;&gt;new chapter 7&lt;/a&gt; | &lt;a href=&#34;../slides/types.pdf&#34;&gt;slides&lt;/a&gt;]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt; &lt;th class=&#34;date&#34;&gt;Feb 15&lt;/th&gt;
    &lt;td&gt;
      Type classes&lt;br/&gt;
      [ readings: &lt;a href=&#34;../book/ch07.pdf&#34;&gt;new chapter 7&lt;/a&gt; | &lt;a href=&#34;../slides/type-classes.pdf&#34;&gt;slides&lt;/a&gt; | &lt;a href=&#34;../code/type-classes-1.hs&#34;&gt;type-classes-1.hs&lt;/a&gt; | &lt;a href=&#34;../code/type-classes-2.hs&#34;&gt;type-classes-2.hs&lt;/a&gt; ]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class=&#34;info&#34;&gt; &lt;th class=&#34;date&#34;&gt;Feb 20&lt;/th&gt;
    &lt;td&gt; President&#39;s day - no class&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt; &lt;th class=&#34;date&#34;&gt;Feb 22&lt;/th&gt;
    &lt;td&gt;
    Type classes (cont) &lt;br/&gt;
    [ &lt;a href=&#34;../code/TC1.hs&#34;&gt;using type classes&lt;/a&gt; | &lt;a href=&#34;../code/TC1D.hs&#34;&gt;desugaring type classes&lt;/a&gt; ]
  &lt;/tr&gt;
  &lt;tr  class=&#34;info&#34;&gt; &lt;th class=&#34;date&#34;&gt;Feb 27&lt;/th&gt;
    &lt;td&gt; Midterm exam
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan=&#34;3&#34; class=&#34;topic&#34;&gt;Objects and program organization&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt; &lt;th class=&#34;date&#34;&gt;Mar 01&lt;/th&gt;
    &lt;td&gt;
      Objects&lt;br/&gt;
      [ readings: chapters 10, 11
      | optional reading:
      &lt;a href=&#34;http://web.cecs.pdx.edu/~black/publications/O-JDahl.pdf&#34;&gt;OOP history&lt;/a&gt;,
      &lt;a href=&#34;http://worrydream.com/EarlyHistoryOfSmalltalk/&#34;&gt;Smalltalk history&lt;/a&gt;
      | &lt;a href=&#34;../slides/objects.pdf&#34;&gt;slides&lt;/a&gt; ]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class=&#34;warning&#34;&gt; &lt;th class=&#34;date&#34;&gt;Mar 06&lt;/th&gt;
    &lt;td&gt;
      Objects (cont)&lt;br/&gt;
      [ &lt;a href=&#34;../slides/objects-cont.pdf&#34;&gt;slides&lt;/a&gt; ]
      &lt;!-- [ readings: chapters 11, 12 ] --&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt; &lt;th class=&#34;date&#34;&gt;Mar 08&lt;/th&gt;
    &lt;td&gt;
      Vtables, subtyping and inheritance&lt;br/&gt;
      [ readings: chapters 11, 12 | &lt;a href=&#34;../slides/cpp-and-subtyping.pdf&#34;&gt;slides&lt;/a&gt; ]
      &lt;!-- Memory management and garbage collection --&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan=&#34;3&#34; class=&#34;topic&#34;&gt;Control flow and side-effects&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class=&#34;warning&#34;&gt; &lt;th class=&#34;date&#34;&gt;Mar 13&lt;/th&gt;
    &lt;td&gt;
      Control flow, exceptions, and continuations
      [ readings: sections 8.1-8.3, &lt;a href=&#34;http://matt.might.net/articles/by-example-continuation-passing-style/&#34;&gt;CPS in JavaScript&lt;/a&gt;
      | &lt;a href=&#34;../slices/control.pdf&#34;&gt;slides&lt;/a&gt; ]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt; &lt;th class=&#34;date&#34;&gt;Mar 15&lt;/th&gt;
    &lt;td&gt;
      Continuations and monads
      [ readings: &lt;a href=&#34;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/mark.pdf&#34;&gt;Tackling the Awkward Squad&lt;/a&gt; ]
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class=&#34;info&#34;&gt;
    &lt;th class=&#34;date&#34;&gt;Mar 22&lt;/th&gt;
    &lt;td&gt;Final exam&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;
Please note that this syllabus is subject to change.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSE 130</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/index.html</link>
      <pubDate>Tue, 23 Aug 2016 01:59:45 -0700</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/index.html</guid>
      <description>

&lt;p&gt;This course will cover basic concepts and design trade-offs related to
programming languages. The first half of the course focuses on functions,
types, scope, storage management, exceptions, and continuations. The second
half covers object-oriented features and concurrency. We will conclude with a
few special-topics in programming languages. The class also has a number of
small labs where students get to implement some of the language features
discussed in class.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Section ID:&lt;/strong&gt; 895741&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lectures:&lt;/strong&gt; Mondays and Wednesdays, 6:30-7:50PM in Ledden Auditorium&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Section:&lt;/strong&gt; Fridays, 8:00-8:50AM in WLH 2005 and 3:00-3:50 PM in Pepper Canyon 122&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Staff email:&lt;/strong&gt; &lt;a href=&#34;mailto:ucsd-cse130-winter17@googlegroups.com&#34;&gt;ucsd-cse130-winter17@googlegroups.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Piazza:&lt;/strong&gt; &lt;a href=&#34;https://piazza.com/ucsd/winter2017/cse130&#34;&gt;https://piazza.com/ucsd/winter2017/cse130&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clicker registration:&lt;/strong&gt; &lt;a href=&#34;https://goo.gl/forms/7BNqWZIl15n7rKL63&#34;&gt;https://goo.gl/forms/7BNqWZIl15n7rKL63&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;textbook&#34;&gt;Textbook&lt;/h4&gt;

&lt;p&gt;We will be following John Mitchell&amp;rsquo;s &lt;a
href=&#34;https://books.google.com/books?id=AUUgAwAAQBAJ&#34;&gt;Concepts In Programming
Languages&lt;/a&gt; textbook and assigning reading from this book and various other
online resources and papers. Some of the book chapters have been revised, we
will be handing out PDFs of these chapters. Cheaper renting options for the book
seem to be available online (e.g., on &lt;a
href=&#34;https://www.amazon.com/Concepts-Programming-Languages-John-Mitchell-ebook/dp/B00AHTN2TA/ref=mt_kindle?_encoding=UTF8&amp;me=&#34;&gt;Amazon&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you are serious about programming languages Benjamin Pierce&amp;rsquo;s &lt;a
href=&#34;https://www.cis.upenn.edu/~bcpierce/tapl/&#34;&gt;Types and Programming
Languages&lt;/a&gt; is a must.&lt;/p&gt;

&lt;h4 id=&#34;course-staff&#34;&gt;Course Staff&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/&#34;&gt;Deian Stefan&lt;/a&gt; (Instructor)&lt;/li&gt;
&lt;li&gt;Mario Alvarez (TA)&lt;/li&gt;
&lt;li&gt;Atyansh Jaiswal (TA)&lt;/li&gt;
&lt;li&gt;Abdul Alkhelaifi (TA)&lt;/li&gt;
&lt;li&gt;Matt Chan (tutor)&lt;/li&gt;
&lt;li&gt;Antonella Wilby (TA)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h4&gt;

&lt;p&gt;This course is based on material from Stanford&amp;rsquo;s, UCSD&amp;rsquo;s, and Tufts&amp;rsquo;
programming languages courses.
Thanks to these fantastic instructors for all their hard work:
&lt;a href=&#34;http://www.cs.tufts.edu/~kfisher/&#34;&gt;Kathleen Fisher&lt;/a&gt;,
&lt;a href=&#34;http://ranjitjhala.github.io/&#34;&gt;Ranjit Jhala&lt;/a&gt;,
&lt;a href=&#34;http://cseweb.ucsd.edu/~lerner/&#34;&gt;Sorin Lerner&lt;/a&gt;,
&lt;a href=&#34;http://theory.stanford.edu/people/jcm/&#34;&gt;John C. Mitchell&lt;/a&gt;,
&lt;a href=&#34;http://www.cs.tufts.edu/~nr/&#34;&gt;Norman Ramsey&lt;/a&gt;, and
&lt;a href=&#34;http://ezyang.com/&#34;&gt;Edward Z. Yang&lt;/a&gt;. Some of the
organizational/administrative things are thanks to &lt;a
href=&#34;http://www.scs.stanford.edu/~dm/&#34;&gt;David Mazières&lt;/a&gt; and &lt;a
href=&#34;http://cseweb.ucsd.edu/~hovav/&#34;&gt;Hovav Shacham&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact information</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/contact/</link>
      <pubDate>Tue, 23 Aug 2016 01:59:45 -0700</pubDate>
      <author>deian&#43;cse130@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse130-winter17/contact/</guid>
      <description>

&lt;p&gt;For general information and questions, please post to the class
&lt;a href=&#34;https://piazza.com/ucsd/winter2017/cse130&#34;&gt;Piazza&lt;/a&gt;.  (It&amp;rsquo;s very likely that
other students will have the same question.) We will post announcements on
Piazza, so please make sure to sign up.  For urgent or personal matters
matters, please post a private question or contact the course staff by email.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course staff email address:&lt;/strong&gt; &lt;a href=&#34;mailto:ucsd-cse130-winter17@googlegroups.com&#34;&gt;ucsd-cse130-winter17@googlegroups.com&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;instructor&#34;&gt;Instructor&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/&#34;&gt;Deian Stefan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Email:&lt;/strong&gt; &lt;a href=&#34;mailto:deian+cse130@cs.ucsd.edu&#34;&gt;deian+cse130@cs.ucsd.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Address:&lt;/strong&gt; CSE 3126&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Office Hours:&lt;/strong&gt; Friday 2:00-3:30PM or by appointment&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;teaching-assistants&#34;&gt;Teaching Assistants&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; Mario M. Alvarez&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Office hours:&lt;/strong&gt; Monday, 4pm-5pm in CSE B240A
&lt;hr/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; Atyansh Jaiswal (AJ)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Office hours:&lt;/strong&gt; Tuesday 12-1:30PM in CSE 3111
&lt;hr/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; Abdulrahman M. Alkhelaifi (Abdul)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Office hours:&lt;/strong&gt; Thursday 3:30 - 4:30 PM in CSE B260A
&lt;hr/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; Matthew Chan&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Office hours:&lt;/strong&gt; Wednesday 4:30 - 6 PM in CSE 3111
&lt;hr/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; Antonella Wilby&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Office hours:&lt;/strong&gt; Friday 1:00 - 2:00 PM in CSE 2238&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
